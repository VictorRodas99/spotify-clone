---
import type { Playlist } from '@lib/types/playlist'
import type { Album, Artist } from '@lib/types/general'
import { Image } from 'astro:assets'
import { API_URL } from 'src/config'

interface Props {
  data: Playlist | Album | Artist
}

// https://api.deezer.com/search?q=album:"LSD and the search for god"&artist:"LSD and the search for god "

const { data } = Astro.props

// first of all we are going to map this in Spanish
const mappedDataType = {
  playlist: 'Playlist',
  album: 'Álbum',
  artist: 'Artista'
}

const mappedData = {
  id: '',
  cover: '/images/playlists/playlist-11.jpg',
  mappedDataType: mappedDataType[data.type],
  originalType: data.type,
  name: data.name,
  author: ''
}

if (data.type !== 'playlist') {
  const { name, type } = data

  if (type === 'album') {
    const { artists } = data
    const joinedArtistsString = artists.join(', ')

    const response = await fetch(
      `${API_URL}/search/album?q="${name}"&artist="${joinedArtistsString}"&limit=5`
    )
    const jsonResponse = await response.json() // TODO: refactor and validate this
    const relatedAlbums = jsonResponse.data // always take the first coincidence

    const filteredAlbums = relatedAlbums.filter(
      (album) => album.artist.name === artists[0]
    )

    const [album] = filteredAlbums // we take the most relevant

    mappedData.id = album.id
    mappedData.cover = album.cover_big
    mappedData.author = joinedArtistsString
  } else {
    // fetch data for artists
    const response = await fetch(`${API_URL}/search/artist?q="${name}"&limit=5`)
    const jsonReponse = await response.json()

    const relatedArtists = jsonReponse.data
    const filteredArtists = relatedArtists.filter(
      (artist) => artist.name === name
    )

    const [artist] = filteredArtists

    mappedData.id = artist.id
    mappedData.cover = artist.picture_big
  }
} else {
  mappedData.id = data.id
  mappedData.cover = data.cover
  mappedData.author = data.creator
}

// console.log(mappedData)
---

<li>
  <a
    href={`${mappedData.originalType}/${mappedData.id}`}
    class="flex gap-3 p-2 hover:bg-primary-dark-50 rounded-md"
  >
    <div>
      <Image
        class:list={[
          'object-cover',
          { 'rounded-md': mappedData.originalType !== 'artist' },
          { 'rounded-full': mappedData.originalType === 'artist' }
        ]}
        width={50}
        height={50}
        src={mappedData.cover}
        alt={`${data.name}-${mappedData.originalType}-cover`}
      />
    </div>
    <div>
      <h2 class="text-white">{mappedData.name}</h2>
      <p>
        {mappedData.mappedDataType} &#903; {mappedData.author}
      </p>
    </div>
  </a>
</li>
